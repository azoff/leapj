// Generated by CoffeeScript 1.7.1
var KeyTapListener, LeapEventListener, PinchListener, SpaceListener, activeCommands, keyTapListener, leapToFirebase, output, pinchHandler, progress, spaceListener,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

output = document.getElementById("output");

progress = document.getElementById("progress");

activeCommands = document.getElementById("activeCommands");

if (typeof LeapToFirebase === "undefined" || LeapToFirebase === null) {
  throw "No LeapToFirebase";
}

leapToFirebase = new LeapToFirebase(config.firebase_room_uri);

LeapEventListener = (function() {
  function LeapEventListener() {
    console.log("Setting up...");
  }

  LeapEventListener.prototype.listen = function() {
    return console.log("Listening for event");
  };

  LeapEventListener.prototype.sendEvent = function(type, value) {
    var firebaseEvent;
    console.log("Event: " + type + ", Value: " + (JSON.stringify(value)));
    firebaseEvent = {
      type: type,
      value: value
    };
    if (firebaseEvent != null) {
      return leapToFirebase.sendToFirebase(firebaseEvent);
    }
  };

  LeapEventListener.prototype.displayActiveCommand = function(text) {
    if (activeCommands) {
      return activeCommands.innerHTML = "<h1> " + text + " </h1>";
    }
  };

  return LeapEventListener;

})();

PinchListener = (function(_super) {
  __extends(PinchListener, _super);

  function PinchListener() {
    this.PINCH_STRENGTH_ON = .8;
    this.PINCH_STRENGTH_OFF = .4;
    console.log("Init pinch listener... Pinch On=" + this.PINCH_STRENGTH_ON + ", Off=" + this.PINCH_STRENGTH_OFF);
    this.pinched = false;
    this.pinched_finger = null;
  }

  PinchListener.prototype.findPinchingFingerType = function(hand) {
    var closest, current, distance, f, fingerIndex, pincher, _i;
    console.log("findPinchingFingerType");
    closest = 500;
    for (f = _i = 0; _i <= 4; f = ++_i) {
      current = hand.fingers[f];
      distance = Leap.vec3.distance(hand.thumb.tipPosition, current.tipPosition);
      if (current !== hand.thumb && distance < closest) {
        closest = distance;
        pincher = current;
        fingerIndex = f;
      }
    }
    return {
      pincher: pincher,
      fingerIndex: fingerIndex
    };
  };

  PinchListener.prototype.updateUi = function(pinchStrength) {
    if (output && progress) {
      output.innerHTML = pinchStrength;
      return progress.style.width = pinchStrength * 100 + "%";
    } else {
      return console.error("UI hooks aren't configured. output (" + output + "), progress (" + progress + ")");
    }
  };

  PinchListener.prototype.sendEvent = function(type, value) {
    console.log("Leap:Pinch event");
    this.displayActiveCommand(type, value);
    return PinchListener.__super__.sendEvent.call(this, type, value);
  };

  PinchListener.prototype.displayActiveCommand = function(type, value) {
    return PinchListener.__super__.displayActiveCommand.call(this, "" + type + " - " + value.hand + " " + value.finger);
  };

  PinchListener.prototype.listen = function(frame) {
    var fingerIndex, hand, pinchStrength, whichHand, _i, _len, _ref, _results;
    if (!(frame.hands[0] || frame.hands[1])) {
      return;
    }
    _ref = frame.hands;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      hand = _ref[_i];
      if (!hand) {
        continue;
      }
      whichHand = hand.type;
      pinchStrength = hand.pinchStrength.toPrecision(2);
      this.updateUi(pinchStrength);
      if (!this.pinched && pinchStrength > this.PINCH_STRENGTH_ON) {
        fingerIndex = this.findPinchingFingerType(hand).fingerIndex;
        this.pinched = true;
        this.pinched_finger = fingerIndex;
        _results.push(this.sendEvent('pinch-start', {
          finger: this.pinched_finger,
          hand: whichHand
        }));
      } else if (this.pinched && pinchStrength < this.PINCH_STRENGTH_OFF) {
        this.sendEvent('pinch-stop', {
          finger: this.pinched_finger,
          hand: whichHand
        });
        this.pinched = false;
        _results.push(this.pinched_finger = null);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return PinchListener;

})(LeapEventListener);

SpaceListener = (function(_super) {
  __extends(SpaceListener, _super);

  function SpaceListener() {
    console.log("Init ThumbAndSlideListener");
    this.lastEventTimestamp = Date.now();
  }

  SpaceListener.prototype.sendEvent = function(type, value) {
    return SpaceListener.__super__.sendEvent.call(this, type, value);
  };

  SpaceListener.prototype.normalize = function(value, min, max, debug) {
    var beforeValue, factor, range, significant_digits;
    if (debug == null) {
      debug = false;
    }
    significant_digits = 3;
    factor = Math.pow(10, significant_digits);
    if (debug) {
      beforeValue = value;
    }
    range = max - min;
    value = (value - min) / range;
    value = Math.round(value * factor) / factor;
    value = Math.max(Math.min(value, 1), 0);
    if (debug) {
      console.log(value, beforeValue);
    }
    return value;
  };

  SpaceListener.prototype.displayActiveCommand = function(type, value) {
    return SpaceListener.__super__.displayActiveCommand.call(this, "" + type + " - " + value.hand + " - " + value.x + "," + value.y + "," + value.z);
  };

  SpaceListener.prototype.listen = function(frame) {
    var TIME_BETWEEN_EVENTS, e, hand, timestamp, whichHand, _i, _len, _ref, _results;
    if (!(frame.hands[0] || frame.hands[1])) {
      return;
    }
    timestamp = Date.now();
    TIME_BETWEEN_EVENTS = 50;
    if (!(timestamp - this.lastEventTimestamp > TIME_BETWEEN_EVENTS)) {
      return;
    }
    this.lastEventTimestamp = timestamp;
    _ref = frame.hands;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      hand = _ref[_i];
      if (!hand) {
        continue;
      }
      whichHand = hand.type;
      console.log(hand.palmPosition);
      e = {
        x: this.normalize(hand.palmPosition[0], -80, 90),
        y: this.normalize(hand.palmPosition[1], 55, 200),
        z: this.normalize(hand.palmPosition[2], -100, 80),
        hand: whichHand
      };
      this.sendEvent('space', e);
      _results.push(this.displayActiveCommand('space', e));
    }
    return _results;
  };

  return SpaceListener;

})(LeapEventListener);

KeyTapListener = (function(_super) {
  __extends(KeyTapListener, _super);

  function KeyTapListener() {
    console.log("Init KeyTapListener");
  }

  KeyTapListener.prototype.sendEvent = function(type, value) {};

  KeyTapListener.prototype.listen = function(gesture) {
    return console.log("key tap listen");
  };

  return KeyTapListener;

})(LeapEventListener);

pinchHandler = new PinchListener;

keyTapListener = new KeyTapListener;

spaceListener = new SpaceListener;

Leap.loop({
  enableGestures: true,
  background: true
}, function(frame) {
  pinchHandler.listen(frame);
  return spaceListener.listen(frame);
});
